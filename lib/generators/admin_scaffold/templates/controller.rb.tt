<% module_namespacing do -%>
class Admin::<%= controller_class_name %>Controller < Admin::AdminController
  before_action :set_<%= singular_table_name %>, only: %i[ show edit update destroy ]

  # GET /admin<%= route_url %>
  def index
    <%- if attributes.map(&:name).include?("active") -%>
    @show_inactive = params[:show_inactive] == "1"
    @<%= plural_table_name %> = @show_inactive ? <%= class_name %>.all : <%= class_name %>.active
    @pagy, @<%= plural_table_name %> = pagy(@<%= plural_table_name %>.order(active: :desc, created_at: :desc))
    <%- else -%>
    @pagy, @<%= plural_table_name %> = pagy(<%= orm_class.all(class_name) %>)
    <%- end -%>
  end

  # GET /admin<%= route_url %>/1
  def show
  end

  # GET /admin<%= route_url %>/new
  def new
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>
  end

  # GET /admin<%= route_url %>/1/edit
  def edit
  end

  # POST /admin<%= route_url %>
  def create
    @<%= singular_table_name %> = <%= orm_class.build(class_name, "#{singular_table_name}_params") %>

    if @<%= orm_instance.save %>
      redirect_to admin_<%= index_helper %>_url, notice: <%= %("#{human_name} was successfully created.") %>
    else
      render :new, status: :unprocessable_entity
    end
  end

  # PATCH/PUT /admin<%= route_url %>/1
  def update
    if @<%= orm_instance.update("#{singular_table_name}_params") %>
      redirect_to admin_<%= index_helper %>_url, notice: <%= %("#{human_name} was successfully updated.") %>, status: :see_other
    else
      render :edit, status: :unprocessable_entity
    end
  end

  # DELETE /admin<%= route_url %>/1
  def destroy
    <%- if attributes.map(&:name).include?("active") -%>
    @<%= singular_table_name %>.deactivate!
    redirect_back_or_to admin_<%= index_helper %>_url, notice: <%= %("#{human_name} was successfully deactivated.") %>, status: :see_other
    <%- else -%>
    @<%= orm_instance.destroy %>
    redirect_back_or_to admin_<%= index_helper %>_url, notice: <%= %("#{human_name} was successfully deleted.") %>, status: :see_other
    <%- end -%>
  end

  private
  
  def set_<%= singular_table_name %>
    @<%= singular_table_name %> = <%= orm_class.find(class_name, "params[:id]") %>
  end

  def <%= "#{singular_table_name}_params" %>
    <%- if attributes_names.empty? -%>
    params.fetch(:<%= singular_table_name %>, {})
    <%- else -%>
    params.require(:<%= singular_table_name %>).permit(<%= permitted_params %>)
    <%- end -%>
  end
end
<% end -%>